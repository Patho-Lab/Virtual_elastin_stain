// Define helper function for identifying aligned stack windows
function startsWith(str, prefix) {
    if (lengthOf(prefix) == 0) {
        return 1;
    }
    if (indexOf(str, prefix) == 0) {
        return 1;
    } else {
        return 0;
    }
}

// Function to process a pair of subfolders
function processFolderPair(fixedImageFolder, movingImageFolder, fixedImagePrefix, movingImagePrefix, outputFolder, siftParams) {
    outputImagePrefix = "aligned_"; // Prefix for saved aligned images
    
    // Get list of files in the fixed image folder
    listRawFixed = getFileList(fixedImageFolder);
    if (listRawFixed.length == 0) {
        print("No items found in the fixed image folder: " + fixedImageFolder);
        return;
    }

    // Filter files matching the prefix
    listFilteredFixed = newArray(listRawFixed.length);
    validCount = 0;
    print("Filtering files in fixed image folder...");
    for (i = 0; i < listRawFixed.length; i++) {
        currentFileName = listRawFixed[i];
        fullPath = fixedImageFolder + File.separator + currentFileName;
        if (!File.isFile(fullPath)) {
            print("  Skipping: '" + fullPath + "' is not a file or is inaccessible.");
        } else if (substring(currentFileName, 0, lengthOf(fixedImagePrefix)) != fixedImagePrefix) {
            print("  Skipping: '" + currentFileName + "' does not start with prefix '" + fixedImagePrefix + "'.");
        } else {
            listFilteredFixed[validCount] = currentFileName;
            validCount++;
            print("  Found valid fixed file: " + currentFileName);
        }
    }
    listFilteredFixed = Array.trim(listFilteredFixed, validCount);
    
    if (listFilteredFixed.length == 0) {
        print("No valid fixed image files found in " + fixedImageFolder + " starting with prefix '" + fixedImagePrefix + "'. Skipping.");
        return;
    }
    
    print("Found " + listFilteredFixed.length + " fixed image file(s) matching prefix '" + fixedImagePrefix + "'. Proceeding to process pairs.");
    
    // Process each image pair
    processedCount = 0;
    for (i = 0; i < listFilteredFixed.length; i++) {
        fixedImageName = listFilteredFixed[i];
        if (lengthOf(fixedImageName) <= lengthOf(fixedImagePrefix)) {
            print("----------------------------------------------------");
            print("  WARNING: Filename '" + fixedImageName + "' is too short to contain prefix and common part. Skipping.");
            continue;
        }
        
        commonPart = substring(fixedImageName, lengthOf(fixedImagePrefix));
        movingImageName = movingImagePrefix + commonPart;
        fixedImagePath = fixedImageFolder + File.separator + fixedImageName;
        movingImagePath = movingImageFolder + File.separator + movingImageName;
        
        print("----------------------------------------------------");
        print("Processing pair " + (i + 1) + " of " + listFilteredFixed.length + ":");
        print("  Fixed: " + fixedImagePath);
        print("  Moving: " + movingImagePath);
        
        if (!File.exists(movingImagePath)) {
            print("  ERROR: Corresponding moving image not found: " + movingImagePath);
            continue;
        }
        
        // Clean up existing images
        while (nImages() > 0) {
            run("Close All");
            wait(100);
        }
        if (nImages() > 0) {
            print("  ERROR: Could not close all images. Skipping this pair.");
            continue;
        }
        
        // Open images
        print("  Opening fixed image...");
        open(fixedImagePath);
        if (nImages() == 0) {
            print("  ERROR: Failed to open fixed image: " + fixedImagePath);
            continue;
        }
        fixedImageTitle = getTitle();
        
        print("  Opening moving image...");
        open(movingImagePath);
        if (nImages() != 2) {
            print("  ERROR: Failed to open moving image or unexpected windows appeared.");
            if (isOpen(fixedImageTitle)) { selectWindow(fixedImageTitle); close(); }
            while (nImages() > 0) { selectImage(nImages()); run("Close"); }
            continue;
        }
        movingImageTitle = getTitle();
        
        // Create stack
        print("  Creating stack from open images...");
        selectWindow(fixedImageTitle);
        selectWindow(movingImageTitle);
        run("Images to Stack", "use");
        originalStackTitle = getTitle();
        print("  Original stack created: " + originalStackTitle + " with " + nSlices() + " slices.");
        if (nSlices() != 2) {
            print("  ERROR: Stack does not have 2 slices.");
            if (isOpen(originalStackTitle)) { selectWindow(originalStackTitle); close(); }
            while (nImages() > 0) { selectImage(nImages()); run("Close"); }
            continue;
        }
        
        // Record windows before SIFT
        titlesBeforeSIFT = newArray(nImages());
        for (j = 0; j < nImages(); j++) {
            selectImage(j + 1);
            titlesBeforeSIFT[j] = getTitle();
        }
        selectWindow(originalStackTitle);
        
        // Run SIFT alignment
        print("  Running Linear Stack Alignment with SIFT...");
        run("Linear Stack Alignment with SIFT", siftParams);
        
        // Identify aligned stack
        alignedStackTitle = "";
        for (j = 0; j < nImages(); j++) {
            selectImage(j + 1);
            currentTitle = getTitle();
            existsBefore = false;
            for (k = 0; k < titlesBeforeSIFT.length; k++) {
                if (currentTitle == titlesBeforeSIFT[k]) {
                    existsBefore = true;
                    break;
                }
            }
            if (!existsBefore && startsWith(currentTitle, "Aligned ")) {
                alignedStackTitle = currentTitle;
                print("  Identified aligned stack window: " + alignedStackTitle);
                break;
            }
        }
        
        if (alignedStackTitle == "" || !isOpen(alignedStackTitle)) {
            print("  ERROR: Could not find the aligned stack window.");
            while (nImages() > 0) { selectImage(nImages()); run("Close"); }
            continue;
        }
        
        selectWindow(alignedStackTitle);
        print("  Alignment complete. Aligned stack: " + alignedStackTitle + " with " + nSlices() + " slices.");
        
        // Save aligned moving image
        if (nSlices() >= 2) {
            setSlice(2);
            tempAlignedImageTitle = "temp_aligned_slice_for_saving_" + i;
            run("Duplicate...", "title=[" + tempAlignedImageTitle + "]");
            outputImageName = outputImagePrefix + movingImagePrefix + commonPart;
            fullOutputPath = outputFolder + File.separator + outputImageName;
            print("  Saving aligned moving image to: " + fullOutputPath);
            if (isOpen(tempAlignedImageTitle)) {
                selectWindow(tempAlignedImageTitle);
                saveAs("Jpeg", fullOutputPath);
                if (File.exists(fullOutputPath)) {
                    processedCount++;
                    totalProcessed++; // Update global counter
                    print("  Save successful.");
                } else {
                    print("  ERROR: File saving failed for: " + fullOutputPath);
                }
                close();
            } else {
                print("  ERROR: Failed to duplicate slice 2 for saving.");
            }
        } else {
            print("  WARNING: Aligned stack has fewer than 2 slices. Skipping save.");
        }
        
        // Clean up
        if (isOpen(alignedStackTitle)) { selectWindow(alignedStackTitle); close(); }
        if (isOpen(originalStackTitle)) { selectWindow(originalStackTitle); close(); }
        while (nImages() > 0) {
            print("Warning: Extra image window found: " + getTitle() + ". Closing.");
            selectImage(nImages());
            run("Close");
            wait(50);
        }
    }
    print("Processed " + processedCount + " pairs for " + fixedImageFolder + " and " + movingImageFolder);
}

// Main script
// Define parent directories
heParent = "";
ffParent = "";
outputFolder = "";

// SIFT parameters
siftParams = "initial_gaussian_blur=1.60 " +
             "steps_per_scale_octave=3 " +
             "minimum_image_size=64 " +
             "maximum_image_size=1024 " +
             "feature_descriptor_size=4 " +
             "feature_descriptor_orientation_bins=8 " +
             "closest/next_closest_ratio=0.92 " +
             "maximal_alignment_error=25 " +
             "inlier_ratio=0.05 " +
             "expected_transformation=Affine " +
             "interpolate";

// Ensure output directory exists
if (!File.exists(outputFolder)) {
    if (File.makeDirectory(outputFolder)) {
        print("Created output directory: " + outputFolder);
    } else {
        exit("Error: Could not create output directory: " + outputFolder);
    }
} else if (!File.isDirectory(outputFolder)) {
    exit("Error: Output path exists but is not a directory: " + outputFolder);
} else {
    print("Output directory exists: " + outputFolder);
}

print("Starting batch SIFT registration across multiple subfolders...");

// Get list of subfolders in heParent
list = getFileList(heParent);
subfolders = newArray();
for (i = 0; i < list.length; i++) {
    if (endsWith(list[i], "/")) {
        subfolderName = substring(list[i], 0, lengthOf(list[i]) - 1);
        subfolders = Array.concat(subfolders, subfolderName);
    }
}
print("Found " + subfolders.length + " subfolders in " + heParent);

// Initialize global counter
totalProcessed = 0;

// Process each subfolder pair
for (i = 0; i < subfolders.length; i++) {
    fixedSubfolder = subfolders[i];
    if (lengthOf(fixedSubfolder) < 2) {
        print("Skipping invalid subfolder: " + fixedSubfolder);
        continue;
    }
    identifier = substring(fixedSubfolder, 2); // Extract identifier after "he"
    movingSubfolder = "f" + identifier;
    
    fixedImageFolder = heParent + "/" + fixedSubfolder;
    movingImageFolder = ffParent + "/" + movingSubfolder;
    
    if (!File.exists(movingImageFolder)) {
        print("Corresponding moving subfolder not found: " + movingImageFolder);
        continue;
    }
    
    fixedImagePrefix = fixedSubfolder + "_";
    movingImagePrefix = movingSubfolder + "_";
    
    print("----------------------------------------------------");
    print("Processing pair: " + fixedImageFolder + " and " + movingImageFolder);
    processFolderPair(fixedImageFolder, movingImageFolder, fixedImagePrefix, movingImagePrefix, outputFolder, siftParams);
}

print("----------------------------------------------------");
print("Batch processing finished. Total pairs processed successfully: " + totalProcessed);
